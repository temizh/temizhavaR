eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = "C:/TemizHava_result_2023/"
)
Sys.sleep(20)
}
library(temizhavaR)
library(temizhavaR)
library(temizhavaR)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = "C:/TemizHava_result_2023/"
)
Sys.sleep(20)
}
remDr$close()
remote_driver$server$stop()
library(temizhavaR)
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
#fonksiyonu calıstırmadan once result_dir'de bulunan file sayisi
previous_file_count <- 0
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = "C:/TemizHava_result_2023/"
)
Sys.sleep(20)
}
remDr$close()
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
#fonksiyonu calıstırmadan once result_dir'de bulunan file sayisi
previous_file_count <- 0
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
Sys.sleep(20)
}
remDr$close()
remote_driver$server$stop()
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
#fonksiyonu calıstırmadan once result_dir'de bulunan file sayisi
previous_file_count <- 0
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
Sys.sleep(20)
}
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
#fonksiyonu calıstırmadan once result_dir'de bulunan file sayisi
previous_file_count <- 0
for (i in 1:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
Sys.sleep(20)
}
library(temizhavaR)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
progress_file <- "progress.txt"
start_index <- 1
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
for (i in start_index:nrow(location_2023)) {
download_data(
bolge = location_2023$Bolge[i],
sehir = location_2023$Sehir[i],
istasyon = location_2023$Istasyonlar[i],
data_type = "hourly",  # or "daily" depending on your requirement
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
writeLines(c(as.character(i + 1), istasyon), progress_file)
Sys.sleep(20)
}
remDr$close()
remote_driver$server$stop()
dbDisconnect(mydb)
file.remove(progress_file)
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
progress_file <- "progress.txt"
start_index <- 1
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
start_index <- 1
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
for (i in start_index:nrow(location_2023)) {
# Gerekli değişkenleri tanımlama
bolge <- location_2023$Bolge[i]
sehir <- location_2023$Sehir[i]
istasyon <- location_2023$Istasyonlar[i]
# Veri indirme
tryCatch({
download_data(
bolge = bolge,
sehir = sehir,
istasyon = istasyon,
data_type = "hourly",  # veya ihtiyacınıza göre "daily"
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir
)
message(paste("Istasyon:", istasyon, " icin indirme islemi basariyla tamamlandi."))
}, error = function(e) {
message(paste("Hata:", e$message))
message(paste("Istasyon:", istasyon, " icin indirme islemi tamamlanamadi veya dosya bulunamadi."))
})
# Her başarılı indirmeden sonra ilerleme dosyasını güncelleme
writeLines(c(as.character(i + 1), istasyon), progress_file)
Sys.sleep(10)
}
progress_file
if (file.exists(progress_file)) {
# Dosyanın içeriğini oku
progress_data <- readLines(progress_file)
# İçeriği ekrana yazdır
print(progress_data)
} else {
message("Progress file bulunamadı.")
}
start_index <- 6
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
tryCatch({
download_data(
bolge = bolge,
sehir = sehir,
istasyon = istasyon,
data_type = "hourly",  # veya ihtiyacınıza göre "daily"
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir,
previous_file_count = previous_file_count
)
}, error = function(e) {
message(paste("Hata:", e$message))
message(paste("Istasyon:", istasyon, " için indirme işlemi tamamlanamadı veya dosya bulunamadı."))
})
# Her başarılı indirmeden sonra ilerleme dosyasını güncelleme
writeLines(c(as.character(i + 1), istasyon), progress_file)
Sys.sleep(10)
}
for (i in start_index:nrow(location_2023)) {
# Gerekli değişkenleri tanımlama
bolge <- location_2023$Bolge[i]
sehir <- location_2023$Sehir[i]
istasyon <- location_2023$Istasyonlar[i]
# Veri indirme
tryCatch({
download_data(
bolge = bolge,
sehir = sehir,
istasyon = istasyon,
data_type = "hourly",  # veya ihtiyacınıza göre "daily"
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir,
previous_file_count = previous_file_count
)
}, error = function(e) {
message(paste("Hata:", e$message))
message(paste("Istasyon:", istasyon, " için indirme işlemi tamamlanamadı veya dosya bulunamadı."))
})
# Her başarılı indirmeden sonra ilerleme dosyasını güncelleme
writeLines(c(as.character(i + 1), istasyon), progress_file)
Sys.sleep(10)
}
start_index <- 6
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
library(RSelenium)
library(netstat)
library(wdman)
library(uuid)
library(DBI)
library(RSQLite)
library(temizhavaR)
#dir.create(result_dir, recursive = TRUE)
result_dir = "C:/TemizHava_result_2023/hourly"
mydb <- dbConnect(RSQLite::SQLite(), "temiz-hava.sqlite")
location_2023 <- dbReadTable(mydb, "location_2023")
# Setup Selenium with Chrome options to specify download directory
eCaps <- list(chromeOptions = list(prefs = list(
"download.default_directory" = normalizePath(result_dir),
"download.prompt_for_download" = FALSE,
"download.directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
)))
selenium()
selenium_object <- selenium(retcommand = T, check= F)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86",  extraCapabilities = eCaps, verbose = F, port = free_port())
remDr <- remote_driver$client
remDr$open()
remDr$navigate("https://sim.csb.gov.tr/STN/STN_Report/StationDataDownloadNew")
# son islenen indeks ve istasyon adını tutan dosya
progress_file <- "progress.txt"
start_index <- 6
last_station <- ""
if (file.exists(progress_file)) {
progress_data <- readLines(progress_file)
start_index <- as.numeric(progress_data[1])
last_station <- progress_data[2]
}
previous_file_count <- length(list.files(result_dir, pattern = "\\.xlsx$", full.names = TRUE))
for (i in start_index:nrow(location_2023)) {
# Gerekli değişkenleri tanımlama
bolge <- location_2023$Bolge[i]
sehir <- location_2023$Sehir[i]
istasyon <- location_2023$Istasyonlar[i]
# Veri indirme
tryCatch({
download_data(
bolge = bolge,
sehir = sehir,
istasyon = istasyon,
data_type = "hourly",  # veya ihtiyacınıza göre "daily"
startdate = "01.01.2023",
enddate = "01.01.2024",
result_dir = result_dir,
previous_file_count = previous_file_count
)
}, error = function(e) {
message(paste("Hata:", e$message))
message(paste("Istasyon:", istasyon, " için indirme işlemi tamamlanamadı veya dosya bulunamadı."))
})
# Her başarılı indirmeden sonra ilerleme dosyasını güncelleme
writeLines(c(as.character(i + 1), istasyon), progress_file)
Sys.sleep(10)
}
